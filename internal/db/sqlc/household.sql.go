// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: household.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHousehold = `-- name: CreateHousehold :one
INSERT INTO households (
    household_name, address
    ) VALUES ( 
        $1, $2
    ) RETURNING household_id, household_name, address, created_at, updated_at
`

type CreateHouseholdParams struct {
	HouseholdName string      `json:"household_name"`
	Address       pgtype.Text `json:"address"`
}

func (q *Queries) CreateHousehold(ctx context.Context, arg CreateHouseholdParams) (Household, error) {
	row := q.db.QueryRow(ctx, createHousehold, arg.HouseholdName, arg.Address)
	var i Household
	err := row.Scan(
		&i.HouseholdID,
		&i.HouseholdName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHousehold = `-- name: DeleteHousehold :one
DELETE FROM households
WHERE household_id = $1
RETURNING household_id, household_name, address, created_at, updated_at
`

func (q *Queries) DeleteHousehold(ctx context.Context, householdID pgtype.UUID) (Household, error) {
	row := q.db.QueryRow(ctx, deleteHousehold, householdID)
	var i Household
	err := row.Scan(
		&i.HouseholdID,
		&i.HouseholdName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchHousehold = `-- name: FetchHousehold :one
SELECT household_id, household_name, address, created_at, updated_at FROM households 
WHERE household_id = $1
LIMIT 1
`

func (q *Queries) FetchHousehold(ctx context.Context, householdID pgtype.UUID) (Household, error) {
	row := q.db.QueryRow(ctx, fetchHousehold, householdID)
	var i Household
	err := row.Scan(
		&i.HouseholdID,
		&i.HouseholdName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHouseholds = `-- name: ListHouseholds :many
SELECT household_id, household_name, address, created_at, updated_at FROM households
LIMIT $1
OFFSET $2
`

type ListHouseholdsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHouseholds(ctx context.Context, arg ListHouseholdsParams) ([]Household, error) {
	rows, err := q.db.Query(ctx, listHouseholds, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Household{}
	for rows.Next() {
		var i Household
		if err := rows.Scan(
			&i.HouseholdID,
			&i.HouseholdName,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHousehold = `-- name: UpdateHousehold :one
UPDATE households
SET 
    household_name = COALESCE($1,household_name),
    address = COALESCE($2,address)
WHERE household_id = $3
RETURNING household_id, household_name, address, created_at, updated_at
`

type UpdateHouseholdParams struct {
	HouseholdName string      `json:"household_name"`
	Address       pgtype.Text `json:"address"`
	HouseholdID   pgtype.UUID `json:"household_id"`
}

func (q *Queries) UpdateHousehold(ctx context.Context, arg UpdateHouseholdParams) (Household, error) {
	row := q.db.QueryRow(ctx, updateHousehold, arg.HouseholdName, arg.Address, arg.HouseholdID)
	var i Household
	err := row.Scan(
		&i.HouseholdID,
		&i.HouseholdName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
