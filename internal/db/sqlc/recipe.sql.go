// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: recipe.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
    author_id, visibility, data
    ) VALUES ( 
        $1, $2, $3
    ) RETURNING id, author_id, visibility, data
`

type CreateRecipeParams struct {
	AuthorID   pgtype.UUID `json:"author_id"`
	Visibility int32       `json:"visibility"`
	Data       []byte      `json:"data"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, createRecipe, arg.AuthorID, arg.Visibility, arg.Data)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Visibility,
		&i.Data,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :one
DELETE FROM recipes
WHERE id = $1
RETURNING id, author_id, visibility, data
`

func (q *Queries) DeleteRecipe(ctx context.Context, id pgtype.UUID) (Recipe, error) {
	row := q.db.QueryRow(ctx, deleteRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Visibility,
		&i.Data,
	)
	return i, err
}

const fetchRecipe = `-- name: FetchRecipe :one
SELECT id, author_id, visibility, data FROM recipes 
WHERE id = $1
LIMIT 1
`

func (q *Queries) FetchRecipe(ctx context.Context, id pgtype.UUID) (Recipe, error) {
	row := q.db.QueryRow(ctx, fetchRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Visibility,
		&i.Data,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, author_id, visibility, data FROM recipes
LIMIT $1
`

func (q *Queries) ListRecipes(ctx context.Context, limit int32) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, listRecipes, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Visibility,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipesByAuthor = `-- name: ListRecipesByAuthor :many
SELECT id, author_id, visibility, data FROM recipes
WHERE author_id = $1
LIMIT $2
`

type ListRecipesByAuthorParams struct {
	AuthorID pgtype.UUID `json:"author_id"`
	Limit    int32       `json:"limit"`
}

func (q *Queries) ListRecipesByAuthor(ctx context.Context, arg ListRecipesByAuthorParams) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, listRecipesByAuthor, arg.AuthorID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Visibility,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes
SET author_id = $1, visibility = $2, data = $3
WHERE id = $4
RETURNING id, author_id, visibility, data
`

type UpdateRecipeParams struct {
	AuthorID   pgtype.UUID `json:"author_id"`
	Visibility int32       `json:"visibility"`
	Data       []byte      `json:"data"`
	ID         pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, updateRecipe,
		arg.AuthorID,
		arg.Visibility,
		arg.Data,
		arg.ID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Visibility,
		&i.Data,
	)
	return i, err
}
