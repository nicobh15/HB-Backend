// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email,first_name, password_hash, role, household_id
    ) VALUES ( 
        $1, $2, $3, $4, $5, $6
    ) RETURNING user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at
`

type CreateUserParams struct {
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	FirstName    string      `json:"first_name"`
	PasswordHash string      `json:"password_hash"`
	Role         string      `json:"role"`
	HouseholdID  pgtype.UUID `json:"household_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.PasswordHash,
		arg.Role,
		arg.HouseholdID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.PasswordHash,
		&i.Role,
		&i.HouseholdID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users 
WHERE email = $1 
RETURNING user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.PasswordHash,
		&i.Role,
		&i.HouseholdID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchUserByEmail = `-- name: FetchUserByEmail :one
SELECT user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at FROM users 
WHERE email = $1
LIMIT 1
`

func (q *Queries) FetchUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, fetchUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.PasswordHash,
		&i.Role,
		&i.HouseholdID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchUserByUserId = `-- name: FetchUserByUserId :one
SELECT user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at FROM users 
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) FetchUserByUserId(ctx context.Context, userID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, fetchUserByUserId, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.PasswordHash,
		&i.Role,
		&i.HouseholdID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchUserByUserName = `-- name: FetchUserByUserName :one
SELECT user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at FROM users 
WHERE username = $1
LIMIT 1
`

func (q *Queries) FetchUserByUserName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, fetchUserByUserName, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.PasswordHash,
		&i.Role,
		&i.HouseholdID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHouseholdMembers = `-- name: ListHouseholdMembers :many
SELECT user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at FROM users 
WHERE household_id = $1
LIMIT $2
OFFSET $3
`

type ListHouseholdMembersParams struct {
	HouseholdID pgtype.UUID `json:"household_id"`
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
}

func (q *Queries) ListHouseholdMembers(ctx context.Context, arg ListHouseholdMembersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listHouseholdMembers, arg.HouseholdID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.PasswordHash,
			&i.Role,
			&i.HouseholdID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at FROM users
ORDER BY username ASC
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.PasswordHash,
			&i.Role,
			&i.HouseholdID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    username = COALESCE(NULLIF($1, ''), username),
    email = COALESCE(NULLIF($2, ''), email),
    first_name = COALESCE(NULLIF($3, ''), first_name),
    password_hash = COALESCE(NULLIF($4, ''), password_hash),
    role = COALESCE(NULLIF($5, ''), role),
    household_id = COALESCE($6, household_id),
    updated_at = now()
WHERE user_id = $7
RETURNING user_id, username, email, first_name, password_hash, role, household_id, created_at, updated_at
`

type UpdateUserParams struct {
	Column1     interface{} `json:"column_1"`
	Column2     interface{} `json:"column_2"`
	Column3     interface{} `json:"column_3"`
	Column4     interface{} `json:"column_4"`
	Column5     interface{} `json:"column_5"`
	HouseholdID pgtype.UUID `json:"household_id"`
	UserID      pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.HouseholdID,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.PasswordHash,
		&i.Role,
		&i.HouseholdID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
