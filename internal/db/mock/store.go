// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nicobh15/hb-backend/internal/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/db/mock/store.go github.com/nicobh15/hb-backend/internal/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/nicobh15/hb-backend/internal/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateHousehold mocks base method.
func (m *MockStore) CreateHousehold(arg0 context.Context, arg1 db.CreateHouseholdParams) (db.Household, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHousehold", arg0, arg1)
	ret0, _ := ret[0].(db.Household)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHousehold indicates an expected call of CreateHousehold.
func (mr *MockStoreMockRecorder) CreateHousehold(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHousehold", reflect.TypeOf((*MockStore)(nil).CreateHousehold), arg0, arg1)
}

// CreateInventoryItem mocks base method.
func (m *MockStore) CreateInventoryItem(arg0 context.Context, arg1 db.CreateInventoryItemParams) (db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInventoryItem indicates an expected call of CreateInventoryItem.
func (mr *MockStoreMockRecorder) CreateInventoryItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInventoryItem", reflect.TypeOf((*MockStore)(nil).CreateInventoryItem), arg0, arg1)
}

// CreateRecipe mocks base method.
func (m *MockStore) CreateRecipe(arg0 context.Context, arg1 db.CreateRecipeParams) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe.
func (mr *MockStoreMockRecorder) CreateRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockStore)(nil).CreateRecipe), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteHousehold mocks base method.
func (m *MockStore) DeleteHousehold(arg0 context.Context, arg1 pgtype.UUID) (db.Household, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHousehold", arg0, arg1)
	ret0, _ := ret[0].(db.Household)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHousehold indicates an expected call of DeleteHousehold.
func (mr *MockStoreMockRecorder) DeleteHousehold(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHousehold", reflect.TypeOf((*MockStore)(nil).DeleteHousehold), arg0, arg1)
}

// DeleteInventoryItem mocks base method.
func (m *MockStore) DeleteInventoryItem(arg0 context.Context, arg1 pgtype.UUID) (db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInventoryItem indicates an expected call of DeleteInventoryItem.
func (mr *MockStoreMockRecorder) DeleteInventoryItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventoryItem", reflect.TypeOf((*MockStore)(nil).DeleteInventoryItem), arg0, arg1)
}

// DeleteRecipe mocks base method.
func (m *MockStore) DeleteRecipe(arg0 context.Context, arg1 pgtype.UUID) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipe indicates an expected call of DeleteRecipe.
func (mr *MockStoreMockRecorder) DeleteRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipe", reflect.TypeOf((*MockStore)(nil).DeleteRecipe), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// FetchHousehold mocks base method.
func (m *MockStore) FetchHousehold(arg0 context.Context, arg1 pgtype.UUID) (db.Household, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHousehold", arg0, arg1)
	ret0, _ := ret[0].(db.Household)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHousehold indicates an expected call of FetchHousehold.
func (mr *MockStoreMockRecorder) FetchHousehold(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHousehold", reflect.TypeOf((*MockStore)(nil).FetchHousehold), arg0, arg1)
}

// FetchInventoryItem mocks base method.
func (m *MockStore) FetchInventoryItem(arg0 context.Context, arg1 pgtype.UUID) (db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInventoryItem indicates an expected call of FetchInventoryItem.
func (mr *MockStoreMockRecorder) FetchInventoryItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInventoryItem", reflect.TypeOf((*MockStore)(nil).FetchInventoryItem), arg0, arg1)
}

// FetchRecipe mocks base method.
func (m *MockStore) FetchRecipe(arg0 context.Context, arg1 pgtype.UUID) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRecipe indicates an expected call of FetchRecipe.
func (mr *MockStoreMockRecorder) FetchRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRecipe", reflect.TypeOf((*MockStore)(nil).FetchRecipe), arg0, arg1)
}

// FetchUserByEmail mocks base method.
func (m *MockStore) FetchUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByEmail indicates an expected call of FetchUserByEmail.
func (mr *MockStoreMockRecorder) FetchUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByEmail", reflect.TypeOf((*MockStore)(nil).FetchUserByEmail), arg0, arg1)
}

// FetchUserByUserId mocks base method.
func (m *MockStore) FetchUserByUserId(arg0 context.Context, arg1 pgtype.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByUserId", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByUserId indicates an expected call of FetchUserByUserId.
func (mr *MockStoreMockRecorder) FetchUserByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByUserId", reflect.TypeOf((*MockStore)(nil).FetchUserByUserId), arg0, arg1)
}

// FetchUserByUserName mocks base method.
func (m *MockStore) FetchUserByUserName(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByUserName", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByUserName indicates an expected call of FetchUserByUserName.
func (mr *MockStoreMockRecorder) FetchUserByUserName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByUserName", reflect.TypeOf((*MockStore)(nil).FetchUserByUserName), arg0, arg1)
}

// ListHouseholdMembers mocks base method.
func (m *MockStore) ListHouseholdMembers(arg0 context.Context, arg1 db.ListHouseholdMembersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHouseholdMembers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHouseholdMembers indicates an expected call of ListHouseholdMembers.
func (mr *MockStoreMockRecorder) ListHouseholdMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHouseholdMembers", reflect.TypeOf((*MockStore)(nil).ListHouseholdMembers), arg0, arg1)
}

// ListHouseholds mocks base method.
func (m *MockStore) ListHouseholds(arg0 context.Context, arg1 db.ListHouseholdsParams) ([]db.Household, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHouseholds", arg0, arg1)
	ret0, _ := ret[0].([]db.Household)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHouseholds indicates an expected call of ListHouseholds.
func (mr *MockStoreMockRecorder) ListHouseholds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHouseholds", reflect.TypeOf((*MockStore)(nil).ListHouseholds), arg0, arg1)
}

// ListInventoryItems mocks base method.
func (m *MockStore) ListInventoryItems(arg0 context.Context, arg1 db.ListInventoryItemsParams) ([]db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInventoryItems", arg0, arg1)
	ret0, _ := ret[0].([]db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventoryItems indicates an expected call of ListInventoryItems.
func (mr *MockStoreMockRecorder) ListInventoryItems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventoryItems", reflect.TypeOf((*MockStore)(nil).ListInventoryItems), arg0, arg1)
}

// ListInventoryItemsByCategory mocks base method.
func (m *MockStore) ListInventoryItemsByCategory(arg0 context.Context, arg1 db.ListInventoryItemsByCategoryParams) ([]db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInventoryItemsByCategory", arg0, arg1)
	ret0, _ := ret[0].([]db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventoryItemsByCategory indicates an expected call of ListInventoryItemsByCategory.
func (mr *MockStoreMockRecorder) ListInventoryItemsByCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventoryItemsByCategory", reflect.TypeOf((*MockStore)(nil).ListInventoryItemsByCategory), arg0, arg1)
}

// ListInventoryItemsByLocation mocks base method.
func (m *MockStore) ListInventoryItemsByLocation(arg0 context.Context, arg1 db.ListInventoryItemsByLocationParams) ([]db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInventoryItemsByLocation", arg0, arg1)
	ret0, _ := ret[0].([]db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventoryItemsByLocation indicates an expected call of ListInventoryItemsByLocation.
func (mr *MockStoreMockRecorder) ListInventoryItemsByLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventoryItemsByLocation", reflect.TypeOf((*MockStore)(nil).ListInventoryItemsByLocation), arg0, arg1)
}

// ListRecipes mocks base method.
func (m *MockStore) ListRecipes(arg0 context.Context, arg1 db.ListRecipesParams) ([]db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipes", arg0, arg1)
	ret0, _ := ret[0].([]db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipes indicates an expected call of ListRecipes.
func (mr *MockStoreMockRecorder) ListRecipes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipes", reflect.TypeOf((*MockStore)(nil).ListRecipes), arg0, arg1)
}

// ListRecipesByAuthor mocks base method.
func (m *MockStore) ListRecipesByAuthor(arg0 context.Context, arg1 db.ListRecipesByAuthorParams) ([]db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipesByAuthor", arg0, arg1)
	ret0, _ := ret[0].([]db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipesByAuthor indicates an expected call of ListRecipesByAuthor.
func (mr *MockStoreMockRecorder) ListRecipesByAuthor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesByAuthor", reflect.TypeOf((*MockStore)(nil).ListRecipesByAuthor), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateHousehold mocks base method.
func (m *MockStore) UpdateHousehold(arg0 context.Context, arg1 db.UpdateHouseholdParams) (db.Household, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHousehold", arg0, arg1)
	ret0, _ := ret[0].(db.Household)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHousehold indicates an expected call of UpdateHousehold.
func (mr *MockStoreMockRecorder) UpdateHousehold(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHousehold", reflect.TypeOf((*MockStore)(nil).UpdateHousehold), arg0, arg1)
}

// UpdateInventoryItem mocks base method.
func (m *MockStore) UpdateInventoryItem(arg0 context.Context, arg1 db.UpdateInventoryItemParams) (db.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventoryItem", arg0, arg1)
	ret0, _ := ret[0].(db.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventoryItem indicates an expected call of UpdateInventoryItem.
func (mr *MockStoreMockRecorder) UpdateInventoryItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventoryItem", reflect.TypeOf((*MockStore)(nil).UpdateInventoryItem), arg0, arg1)
}

// UpdateRecipe mocks base method.
func (m *MockStore) UpdateRecipe(arg0 context.Context, arg1 db.UpdateRecipeParams) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockStoreMockRecorder) UpdateRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockStore)(nil).UpdateRecipe), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
